/* tslint:disable */
/* eslint-disable */
/**
 * Exe201_backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Box
 */
export interface Box {
    /**
     * 
     * @type {number}
     * @memberof Box
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Box
     */
    'boxName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Box
     */
    'quantitySold'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Box
     */
    'rate'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Box
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Box
     */
    'price'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Box
     */
    'thumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Box
     */
    'discount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Box
     */
    'auther'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Box
     */
    'autherNavigation'?: User;
    /**
     * 
     * @type {Array<BoxItem>}
     * @memberof Box
     */
    'boxItems'?: Array<BoxItem> | null;
    /**
     * 
     * @type {Array<BoxTag>}
     * @memberof Box
     */
    'boxTags'?: Array<BoxTag> | null;
    /**
     * 
     * @type {Array<StoreItem>}
     * @memberof Box
     */
    'storeItems'?: Array<StoreItem> | null;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof Box
     */
    'feedbacks'?: Array<Feedback> | null;
    /**
     * 
     * @type {Array<Cart>}
     * @memberof Box
     */
    'carts'?: Array<Cart> | null;
    /**
     * 
     * @type {Array<BoxMedia>}
     * @memberof Box
     */
    'boxMedias'?: Array<BoxMedia> | null;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Box
     */
    'orderItems'?: Array<OrderItem> | null;
}
/**
 * 
 * @export
 * @interface BoxItem
 */
export interface BoxItem {
    /**
     * 
     * @type {number}
     * @memberof BoxItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoxItem
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BoxItem
     */
    'productVariantId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BoxItem
     */
    'quantity'?: number | null;
    /**
     * 
     * @type {Box}
     * @memberof BoxItem
     */
    'box'?: Box;
    /**
     * 
     * @type {ProductVariant}
     * @memberof BoxItem
     */
    'productVariant'?: ProductVariant;
}
/**
 * 
 * @export
 * @interface BoxItemRequest
 */
export interface BoxItemRequest {
    /**
     * 
     * @type {number}
     * @memberof BoxItemRequest
     */
    'boxId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoxItemRequest
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface BoxMedia
 */
export interface BoxMedia {
    /**
     * 
     * @type {number}
     * @memberof BoxMedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoxMedia
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BoxMedia
     */
    'mediaId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof BoxMedia
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Box}
     * @memberof BoxMedia
     */
    'box'?: Box;
    /**
     * 
     * @type {Media}
     * @memberof BoxMedia
     */
    'media'?: Media;
}
/**
 * 
 * @export
 * @interface BoxTag
 */
export interface BoxTag {
    /**
     * 
     * @type {number}
     * @memberof BoxTag
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoxTag
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BoxTag
     */
    'tagVauleId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof BoxTag
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Box}
     * @memberof BoxTag
     */
    'box'?: Box;
    /**
     * 
     * @type {TagValue}
     * @memberof BoxTag
     */
    'tagVaule'?: TagValue;
}
/**
 * 
 * @export
 * @interface Brand
 */
export interface Brand {
    /**
     * 
     * @type {number}
     * @memberof Brand
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Brand
     */
    'brandValue'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Brand
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Brand
     */
    'productVariants'?: Array<ProductVariant> | null;
}
/**
 * 
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * 
     * @type {number}
     * @memberof Cart
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Cart
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Cart
     */
    'productVariantId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Cart
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Cart
     */
    'quantity'?: number | null;
    /**
     * 
     * @type {ProductVariant}
     * @memberof Cart
     */
    'productVariant'?: ProductVariant;
    /**
     * 
     * @type {Box}
     * @memberof Cart
     */
    'box'?: Box;
}
/**
 * 
 * @export
 * @interface CartItem
 */
export interface CartItem {
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    'type'?: number;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {number}
     * @memberof Color
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    'colorValue'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Color
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Color
     */
    'productVariants'?: Array<ProductVariant> | null;
}
/**
 * 
 * @export
 * @interface CreateBoxRequest
 */
export interface CreateBoxRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBoxRequest
     */
    'boxName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateBoxRequest
     */
    'price'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBoxRequest
     */
    'thumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateBoxRequest
     */
    'discount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBoxRequest
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateCartRequest
 */
export interface CreateCartRequest {
    /**
     * 
     * @type {Array<BoxItemRequest>}
     * @memberof CreateCartRequest
     */
    'boxs'?: Array<BoxItemRequest> | null;
    /**
     * 
     * @type {Array<ProductVariantItemRequest>}
     * @memberof CreateCartRequest
     */
    'productVariants'?: Array<ProductVariantItemRequest> | null;
}
/**
 * 
 * @export
 * @interface CreateProductDTO
 */
export interface CreateProductDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateProductDTO
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDTO
     */
    'quantitySold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<CreateProductVariantDTO>}
     * @memberof CreateProductDTO
     */
    'productVariants'?: Array<CreateProductVariantDTO> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProductDTO
     */
    'mediaUrls'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProductDTO
     */
    'tagValues'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CreateProductVariantDTO
 */
export interface CreateProductVariantDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateProductVariantDTO
     */
    'sizeName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductVariantDTO
     */
    'brandName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductVariantDTO
     */
    'colorName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductVariantDTO
     */
    'thumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProductVariantDTO
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProductVariantDTO
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface CreateVoucherDTO
 */
export interface CreateVoucherDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateVoucherDTO
     */
    'voucherName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateVoucherDTO
     */
    'type'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateVoucherDTO
     */
    'value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateVoucherDTO
     */
    'dateStart'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateVoucherDTO
     */
    'dateEnd'?: string | null;
}
/**
 * 
 * @export
 * @interface DeleteCartRequest
 */
export interface DeleteCartRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteCartRequest
     */
    'listProductVariantId'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteCartRequest
     */
    'listBoxId'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'productVariantId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'orderId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'rate'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Feedback
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<FeedbackMedia>}
     * @memberof Feedback
     */
    'feedbackMedia'?: Array<FeedbackMedia> | null;
    /**
     * 
     * @type {Box}
     * @memberof Feedback
     */
    'box'?: Box;
    /**
     * 
     * @type {ProductVariant}
     * @memberof Feedback
     */
    'productVariant'?: ProductVariant;
    /**
     * 
     * @type {Order}
     * @memberof Feedback
     */
    'order'?: Order;
    /**
     * 
     * @type {User}
     * @memberof Feedback
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface FeedbackMedia
 */
export interface FeedbackMedia {
    /**
     * 
     * @type {number}
     * @memberof FeedbackMedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof FeedbackMedia
     */
    'feedbackId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FeedbackMedia
     */
    'mediaId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackMedia
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Feedback}
     * @memberof FeedbackMedia
     */
    'feedback'?: Feedback;
    /**
     * 
     * @type {Media}
     * @memberof FeedbackMedia
     */
    'media'?: Media;
}
/**
 * 
 * @export
 * @interface GuidIdentityUserClaim
 */
export interface GuidIdentityUserClaim {
    /**
     * 
     * @type {number}
     * @memberof GuidIdentityUserClaim
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserClaim
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserClaim
     */
    'claimType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserClaim
     */
    'claimValue'?: string | null;
}
/**
 * 
 * @export
 * @interface GuidIdentityUserLogin
 */
export interface GuidIdentityUserLogin {
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserLogin
     */
    'loginProvider'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserLogin
     */
    'providerKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserLogin
     */
    'providerDisplayName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserLogin
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface GuidIdentityUserRole
 */
export interface GuidIdentityUserRole {
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserRole
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserRole
     */
    'roleId'?: string;
}
/**
 * 
 * @export
 * @interface GuidIdentityUserToken
 */
export interface GuidIdentityUserToken {
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserToken
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserToken
     */
    'loginProvider'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserToken
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuidIdentityUserToken
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface InforAddressDTO
 */
export interface InforAddressDTO {
    /**
     * 
     * @type {string}
     * @memberof InforAddressDTO
     */
    'senderAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InforAddressDTO
     */
    'receiverAddress'?: string | null;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof InforAddressDTO
     */
    'listCartItem'?: Array<CartItem> | null;
}
/**
 * 
 * @export
 * @interface ItemRequest
 */
export interface ItemRequest {
    /**
     * 
     * @type {number}
     * @memberof ItemRequest
     */
    'storeId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ItemRequest
     */
    'productVId'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ItemRequest
     */
    'boxsId'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface MakeOrderDTO
 */
export interface MakeOrderDTO {
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'senderAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'receiverAddress'?: string | null;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof MakeOrderDTO
     */
    'listCartItem'?: Array<CartItem> | null;
    /**
     * 
     * @type {number}
     * @memberof MakeOrderDTO
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'orderService'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'orderNote'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'senderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'receiverName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'senderPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'receiverPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MakeOrderDTO
     */
    'userIP'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MakeOrderDTO
     */
    'paymentType'?: number;
    /**
     * 
     * @type {number}
     * @memberof MakeOrderDTO
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    'mediaUrl'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    'mediaTypeId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Media
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<FeedbackMedia>}
     * @memberof Media
     */
    'feedbackMedia'?: Array<FeedbackMedia> | null;
    /**
     * 
     * @type {Array<BoxMedia>}
     * @memberof Media
     */
    'boxMedia'?: Array<BoxMedia> | null;
    /**
     * 
     * @type {Array<ProductMedia>}
     * @memberof Media
     */
    'productMedia'?: Array<ProductMedia> | null;
    /**
     * 
     * @type {MediaType}
     * @memberof Media
     */
    'mediaType'?: MediaType;
}
/**
 * 
 * @export
 * @interface MediaType
 */
export interface MediaType {
    /**
     * 
     * @type {number}
     * @memberof MediaType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaType
     */
    'mediaName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MediaType
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<Media>}
     * @memberof MediaType
     */
    'media'?: Array<Media> | null;
}
/**
 * 
 * @export
 * @interface MemberRequest
 */
export interface MemberRequest {
    /**
     * 
     * @type {number}
     * @memberof MemberRequest
     */
    'storeId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberRequest
     */
    'users'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'paymentId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'voucherId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'shipPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'statusId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'trackingNumber'?: string | null;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof Order
     */
    'feedbacks'?: Array<Feedback> | null;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    'orderItems'?: Array<OrderItem> | null;
    /**
     * 
     * @type {Array<OrderStatusLog>}
     * @memberof Order
     */
    'orderStatusLogs'?: Array<OrderStatusLog> | null;
    /**
     * 
     * @type {Voucher}
     * @memberof Order
     */
    'voucher'?: Voucher;
    /**
     * 
     * @type {PaymentDetail}
     * @memberof Order
     */
    'payment'?: PaymentDetail;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    'orderStatus'?: OrderStatus;
    /**
     * 
     * @type {User}
     * @memberof Order
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'orderId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'productVariantId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'quantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'price'?: number | null;
    /**
     * 
     * @type {ProductVariant}
     * @memberof OrderItem
     */
    'productVariant'?: ProductVariant;
    /**
     * 
     * @type {Box}
     * @memberof OrderItem
     */
    'box'?: Box;
    /**
     * 
     * @type {Order}
     * @memberof OrderItem
     */
    'order'?: Order;
}
/**
 * 
 * @export
 * @interface OrderStatus
 */
export interface OrderStatus {
    /**
     * 
     * @type {number}
     * @memberof OrderStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderStatus
     */
    'status'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrderStatus
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<OrderStatusLog>}
     * @memberof OrderStatus
     */
    'orderStatusLogs'?: Array<OrderStatusLog> | null;
    /**
     * 
     * @type {Array<Order>}
     * @memberof OrderStatus
     */
    'orders'?: Array<Order> | null;
}
/**
 * 
 * @export
 * @interface OrderStatusLog
 */
export interface OrderStatusLog {
    /**
     * 
     * @type {number}
     * @memberof OrderStatusLog
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderStatusLog
     */
    'orderId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderStatusLog
     */
    'statusId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusLog
     */
    'textLog'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusLog
     */
    'logAt'?: string | null;
    /**
     * 
     * @type {Order}
     * @memberof OrderStatusLog
     */
    'order'?: Order;
    /**
     * 
     * @type {OrderStatus}
     * @memberof OrderStatusLog
     */
    'status'?: OrderStatus;
}
/**
 * 
 * @export
 * @interface PaymentDetail
 */
export interface PaymentDetail {
    /**
     * 
     * @type {number}
     * @memberof PaymentDetail
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentDetail
     */
    'amount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetail
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetail
     */
    'bankCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetail
     */
    'bankTranNo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetail
     */
    'payDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentDetail
     */
    'transactionNo'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentDetail
     */
    'paymentStatusId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetail
     */
    'createdDate'?: string | null;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof PaymentDetail
     */
    'status'?: PaymentStatus;
    /**
     * 
     * @type {Array<Order>}
     * @memberof PaymentDetail
     */
    'orders'?: Array<Order> | null;
}
/**
 * 
 * @export
 * @interface PaymentStatus
 */
export interface PaymentStatus {
    /**
     * 
     * @type {number}
     * @memberof PaymentStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentStatus
     */
    'status'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentStatus
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<PaymentDetail>}
     * @memberof PaymentStatus
     */
    'paymentDetails'?: Array<PaymentDetail> | null;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'quantitySold'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'rate'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'auther'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Product
     */
    'autherNavigation'?: User;
    /**
     * 
     * @type {Array<StoreItem>}
     * @memberof Product
     */
    'storeItems'?: Array<StoreItem> | null;
    /**
     * 
     * @type {Array<ProductMedia>}
     * @memberof Product
     */
    'productMedia'?: Array<ProductMedia> | null;
    /**
     * 
     * @type {Array<ProductTag>}
     * @memberof Product
     */
    'productTags'?: Array<ProductTag> | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Product
     */
    'productVariants'?: Array<ProductVariant> | null;
}
/**
 * 
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'quantitySold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'auther'?: string | null;
    /**
     * 
     * @type {Array<ProductMediaDTO>}
     * @memberof ProductDTO
     */
    'productMedia'?: Array<ProductMediaDTO> | null;
    /**
     * 
     * @type {Array<ProductTagDTO>}
     * @memberof ProductDTO
     */
    'productTags'?: Array<ProductTagDTO> | null;
    /**
     * 
     * @type {Array<ProductVariantDTO>}
     * @memberof ProductDTO
     */
    'productVariants'?: Array<ProductVariantDTO> | null;
}
/**
 * 
 * @export
 * @interface ProductMedia
 */
export interface ProductMedia {
    /**
     * 
     * @type {number}
     * @memberof ProductMedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductMedia
     */
    'productId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductMedia
     */
    'mediaId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductMedia
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Product}
     * @memberof ProductMedia
     */
    'product'?: Product;
    /**
     * 
     * @type {Media}
     * @memberof ProductMedia
     */
    'media'?: Media;
}
/**
 * 
 * @export
 * @interface ProductMediaDTO
 */
export interface ProductMediaDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductMediaDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductMediaDTO
     */
    'productId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductMediaDTO
     */
    'mediaId'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductTag
 */
export interface ProductTag {
    /**
     * 
     * @type {number}
     * @memberof ProductTag
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductTag
     */
    'productId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductTag
     */
    'tagVauleId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductTag
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Product}
     * @memberof ProductTag
     */
    'product'?: Product;
    /**
     * 
     * @type {TagValue}
     * @memberof ProductTag
     */
    'tagVaule'?: TagValue;
}
/**
 * 
 * @export
 * @interface ProductTagDTO
 */
export interface ProductTagDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductTagDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductTagDTO
     */
    'productId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductTagDTO
     */
    'tagVauleId'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductVariant
 */
export interface ProductVariant {
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'productId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'sizeId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'colorId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'brandId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'thumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'weight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'discount'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductVariant
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<BoxItem>}
     * @memberof ProductVariant
     */
    'boxItems'?: Array<BoxItem> | null;
    /**
     * 
     * @type {Array<Cart>}
     * @memberof ProductVariant
     */
    'carts'?: Array<Cart> | null;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof ProductVariant
     */
    'orderItem'?: Array<OrderItem> | null;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof ProductVariant
     */
    'feedbacks'?: Array<Feedback> | null;
    /**
     * 
     * @type {Brand}
     * @memberof ProductVariant
     */
    'brand'?: Brand;
    /**
     * 
     * @type {Color}
     * @memberof ProductVariant
     */
    'color'?: Color;
    /**
     * 
     * @type {Product}
     * @memberof ProductVariant
     */
    'product'?: Product;
    /**
     * 
     * @type {Size}
     * @memberof ProductVariant
     */
    'size'?: Size;
}
/**
 * 
 * @export
 * @interface ProductVariantDTO
 */
export interface ProductVariantDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    'sizeId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    'brandId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    'colorId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantDTO
     */
    'thumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    'quantity'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProductVariantDTO
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Brand}
     * @memberof ProductVariantDTO
     */
    'brand'?: Brand;
    /**
     * 
     * @type {Color}
     * @memberof ProductVariantDTO
     */
    'color'?: Color;
    /**
     * 
     * @type {Product}
     * @memberof ProductVariantDTO
     */
    'product'?: Product;
    /**
     * 
     * @type {Size}
     * @memberof ProductVariantDTO
     */
    'size'?: Size;
}
/**
 * 
 * @export
 * @interface ProductVariantItemRequest
 */
export interface ProductVariantItemRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantItemRequest
     */
    'productVarianItemId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantItemRequest
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface RefreshTokenModel
 */
export interface RefreshTokenModel {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenModel
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'resetCode'?: string | null;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'normalizedName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {Array<Roleclaim>}
     * @memberof Role
     */
    'roleclaims'?: Array<Roleclaim> | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof Role
     */
    'users'?: Array<User> | null;
}
/**
 * 
 * @export
 * @interface Roleclaim
 */
export interface Roleclaim {
    /**
     * 
     * @type {number}
     * @memberof Roleclaim
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Roleclaim
     */
    'roleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Roleclaim
     */
    'claimType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Roleclaim
     */
    'claimValue'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof Roleclaim
     */
    'role'?: Role;
}
/**
 * 
 * @export
 * @interface Size
 */
export interface Size {
    /**
     * 
     * @type {number}
     * @memberof Size
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Size
     */
    'sizeValue'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Size
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Size
     */
    'productVariants'?: Array<ProductVariant> | null;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {number}
     * @memberof Status
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'status1'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Status
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<UserStatusLog>}
     * @memberof Status
     */
    'userStatusLogs'?: Array<UserStatusLog> | null;
}
/**
 * 
 * @export
 * @interface Store
 */
export interface Store {
    /**
     * 
     * @type {number}
     * @memberof Store
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'storeName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Store
     */
    'rate'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Store
     */
    'productQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'status'?: string | null;
    /**
     * 
     * @type {Array<StoreItem>}
     * @memberof Store
     */
    'storeItems'?: Array<StoreItem> | null;
    /**
     * 
     * @type {Array<StoreMember>}
     * @memberof Store
     */
    'storeMembers'?: Array<StoreMember> | null;
}
/**
 * 
 * @export
 * @interface StoreItem
 */
export interface StoreItem {
    /**
     * 
     * @type {number}
     * @memberof StoreItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof StoreItem
     */
    'storeId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StoreItem
     */
    'productId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StoreItem
     */
    'boxId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof StoreItem
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Product}
     * @memberof StoreItem
     */
    'product'?: Product;
    /**
     * 
     * @type {Box}
     * @memberof StoreItem
     */
    'box'?: Box;
    /**
     * 
     * @type {Store}
     * @memberof StoreItem
     */
    'store'?: Store;
}
/**
 * 
 * @export
 * @interface StoreMember
 */
export interface StoreMember {
    /**
     * 
     * @type {number}
     * @memberof StoreMember
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StoreMember
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof StoreMember
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof StoreMember
     */
    'storeId'?: number | null;
    /**
     * 
     * @type {User}
     * @memberof StoreMember
     */
    'member'?: User;
    /**
     * 
     * @type {Store}
     * @memberof StoreMember
     */
    'store'?: Store;
}
/**
 * 
 * @export
 * @interface StoreVM
 */
export interface StoreVM {
    /**
     * 
     * @type {number}
     * @memberof StoreVM
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StoreVM
     */
    'storeName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreVM
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreVM
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreVM
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StoreVM
     */
    'rate'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StoreVM
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StoreVM
     */
    'productQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StoreVM
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'tagName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Tag
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<TagValue>}
     * @memberof Tag
     */
    'tagValues'?: Array<TagValue> | null;
}
/**
 * 
 * @export
 * @interface TagValue
 */
export interface TagValue {
    /**
     * 
     * @type {number}
     * @memberof TagValue
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TagValue
     */
    'tagId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TagValue
     */
    'value'?: string | null;
    /**
     * 
     * @type {Array<BoxTag>}
     * @memberof TagValue
     */
    'boxTags'?: Array<BoxTag> | null;
    /**
     * 
     * @type {Array<ProductTag>}
     * @memberof TagValue
     */
    'productTags'?: Array<ProductTag> | null;
    /**
     * 
     * @type {Tag}
     * @memberof TagValue
     */
    'tag'?: Tag;
}
/**
 * 
 * @export
 * @interface TimeAddInput
 */
export interface TimeAddInput {
    /**
     * 
     * @type {number}
     * @memberof TimeAddInput
     */
    'minutes'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TimeAddInput
     */
    'hours'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TimeAddInput
     */
    'days'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TimeAddInput
     */
    'months'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TimeAddInput
     */
    'years'?: number | null;
}
/**
 * 
 * @export
 * @interface TotalPriceItemDTO
 */
export interface TotalPriceItemDTO {
    /**
     * 
     * @type {number}
     * @memberof TotalPriceItemDTO
     */
    'voucherId'?: number | null;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof TotalPriceItemDTO
     */
    'listCartItem'?: Array<CartItem> | null;
}
/**
 * 
 * @export
 * @interface UpdateBoxRequest
 */
export interface UpdateBoxRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateBoxRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBoxRequest
     */
    'boxName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateBoxRequest
     */
    'price'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBoxRequest
     */
    'thumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateBoxRequest
     */
    'discount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBoxRequest
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateProductDTO
 */
export interface UpdateProductDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDTO
     */
    'productName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<CreateProductVariantDTO>}
     * @memberof UpdateProductDTO
     */
    'productVariants'?: Array<CreateProductVariantDTO> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateProductDTO
     */
    'mediaUrls'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateProductDTO
     */
    'tagValues'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UpdateRoleRequest
 */
export interface UpdateRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRoleRequest
     */
    'roles'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UpdateVoucherDTO
 */
export interface UpdateVoucherDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateVoucherDTO
     */
    'voucherName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateVoucherDTO
     */
    'type'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateVoucherDTO
     */
    'value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateVoucherDTO
     */
    'dateStart'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateVoucherDTO
     */
    'dateEnd'?: string | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'birthday'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {Array<Box>}
     * @memberof User
     */
    'boxes'?: Array<Box> | null;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof User
     */
    'feedbacks'?: Array<Feedback> | null;
    /**
     * 
     * @type {Array<Order>}
     * @memberof User
     */
    'orders'?: Array<Order> | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof User
     */
    'products'?: Array<Product> | null;
    /**
     * 
     * @type {Array<StoreMember>}
     * @memberof User
     */
    'storeMembers'?: Array<StoreMember> | null;
    /**
     * 
     * @type {Array<UserStatusLog>}
     * @memberof User
     */
    'userStatusLogs'?: Array<UserStatusLog> | null;
    /**
     * 
     * @type {Array<GuidIdentityUserClaim>}
     * @memberof User
     */
    'userclaims'?: Array<GuidIdentityUserClaim> | null;
    /**
     * 
     * @type {Array<GuidIdentityUserRole>}
     * @memberof User
     */
    'userRoles'?: Array<GuidIdentityUserRole> | null;
    /**
     * 
     * @type {Array<GuidIdentityUserLogin>}
     * @memberof User
     */
    'userlogins'?: Array<GuidIdentityUserLogin> | null;
    /**
     * 
     * @type {Array<GuidIdentityUserToken>}
     * @memberof User
     */
    'usertokens'?: Array<GuidIdentityUserToken> | null;
    /**
     * 
     * @type {Array<Role>}
     * @memberof User
     */
    'roles'?: Array<Role> | null;
}
/**
 * 
 * @export
 * @interface UserStatusLog
 */
export interface UserStatusLog {
    /**
     * 
     * @type {number}
     * @memberof UserStatusLog
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserStatusLog
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatusLog
     */
    'statusId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusLog
     */
    'textLog'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusLog
     */
    'logAt'?: string | null;
    /**
     * 
     * @type {Status}
     * @memberof UserStatusLog
     */
    'status'?: Status;
    /**
     * 
     * @type {User}
     * @memberof UserStatusLog
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface Voucher
 */
export interface Voucher {
    /**
     * 
     * @type {number}
     * @memberof Voucher
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Voucher
     */
    'voucherName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Voucher
     */
    'type'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Voucher
     */
    'value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Voucher
     */
    'dateStart'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Voucher
     */
    'dateEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Voucher
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<Order>}
     * @memberof Voucher
     */
    'orders'?: Array<Order> | null;
}

/**
 * AuthenApi - axios parameter creator
 * @export
 */
export const AuthenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login with Username and password
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authen/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make new access token with refresh token
         * @param {RefreshTokenModel} [refreshTokenModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenRefreshTokenPost: async (refreshTokenModel?: RefreshTokenModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authen/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenApi - functional programming interface
 * @export
 */
export const AuthenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login with Username and password
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenApi.apiAuthenLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make new access token with refresh token
         * @param {RefreshTokenModel} [refreshTokenModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenRefreshTokenPost(refreshTokenModel?: RefreshTokenModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenRefreshTokenPost(refreshTokenModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenApi.apiAuthenRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenApi - factory interface
 * @export
 */
export const AuthenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenApiFp(configuration)
    return {
        /**
         * 
         * @summary Login with Username and password
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenLoginPost(loginRequest?: LoginRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthenLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make new access token with refresh token
         * @param {RefreshTokenModel} [refreshTokenModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenRefreshTokenPost(refreshTokenModel?: RefreshTokenModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthenRefreshTokenPost(refreshTokenModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenApi - object-oriented interface
 * @export
 * @class AuthenApi
 * @extends {BaseAPI}
 */
export class AuthenApi extends BaseAPI {
    /**
     * 
     * @summary Login with Username and password
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenApi
     */
    public apiAuthenLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenApiFp(this.configuration).apiAuthenLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make new access token with refresh token
     * @param {RefreshTokenModel} [refreshTokenModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenApi
     */
    public apiAuthenRefreshTokenPost(refreshTokenModel?: RefreshTokenModel, options?: RawAxiosRequestConfig) {
        return AuthenApiFp(this.configuration).apiAuthenRefreshTokenPost(refreshTokenModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoxApi - axios parameter creator
 * @export
 */
export const BoxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Box/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} boxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxBoxIdGet: async (boxId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boxId' is not null or undefined
            assertParamExists('apiBoxBoxIdGet', 'boxId', boxId)
            const localVarPath = `/api/Box/{boxId}`
                .replace(`{${"boxId"}}`, encodeURIComponent(String(boxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateBoxRequest} [createBoxRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxCreatePost: async (createBoxRequest?: CreateBoxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Box/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBoxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} boxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxDeleteBoxIdDelete: async (boxId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boxId' is not null or undefined
            assertParamExists('apiBoxDeleteBoxIdDelete', 'boxId', boxId)
            const localVarPath = `/api/Box/delete/{boxId}`
                .replace(`{${"boxId"}}`, encodeURIComponent(String(boxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBoxRequest} [updateBoxRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxUpdatePut: async (updateBoxRequest?: UpdateBoxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Box/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBoxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoxApi - functional programming interface
 * @export
 */
export const BoxApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoxApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoxAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoxAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoxApi.apiBoxAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} boxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoxBoxIdGet(boxId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoxBoxIdGet(boxId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoxApi.apiBoxBoxIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateBoxRequest} [createBoxRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoxCreatePost(createBoxRequest?: CreateBoxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoxCreatePost(createBoxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoxApi.apiBoxCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} boxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoxDeleteBoxIdDelete(boxId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoxDeleteBoxIdDelete(boxId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoxApi.apiBoxDeleteBoxIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateBoxRequest} [updateBoxRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBoxUpdatePut(updateBoxRequest?: UpdateBoxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBoxUpdatePut(updateBoxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoxApi.apiBoxUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoxApi - factory interface
 * @export
 */
export const BoxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoxApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxAllGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiBoxAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} boxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxBoxIdGet(boxId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoxBoxIdGet(boxId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateBoxRequest} [createBoxRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxCreatePost(createBoxRequest?: CreateBoxRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoxCreatePost(createBoxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} boxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxDeleteBoxIdDelete(boxId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoxDeleteBoxIdDelete(boxId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateBoxRequest} [updateBoxRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBoxUpdatePut(updateBoxRequest?: UpdateBoxRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiBoxUpdatePut(updateBoxRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoxApi - object-oriented interface
 * @export
 * @class BoxApi
 * @extends {BaseAPI}
 */
export class BoxApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoxApi
     */
    public apiBoxAllGet(options?: RawAxiosRequestConfig) {
        return BoxApiFp(this.configuration).apiBoxAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} boxId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoxApi
     */
    public apiBoxBoxIdGet(boxId: number, options?: RawAxiosRequestConfig) {
        return BoxApiFp(this.configuration).apiBoxBoxIdGet(boxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateBoxRequest} [createBoxRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoxApi
     */
    public apiBoxCreatePost(createBoxRequest?: CreateBoxRequest, options?: RawAxiosRequestConfig) {
        return BoxApiFp(this.configuration).apiBoxCreatePost(createBoxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} boxId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoxApi
     */
    public apiBoxDeleteBoxIdDelete(boxId: number, options?: RawAxiosRequestConfig) {
        return BoxApiFp(this.configuration).apiBoxDeleteBoxIdDelete(boxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateBoxRequest} [updateBoxRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoxApi
     */
    public apiBoxUpdatePut(updateBoxRequest?: UpdateBoxRequest, options?: RawAxiosRequestConfig) {
        return BoxApiFp(this.configuration).apiBoxUpdatePut(updateBoxRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete all item in Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAll cart of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete array item in cart
         * @param {DeleteCartRequest} [deleteCartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartListItemDelete: async (deleteCartRequest?: DeleteCartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart/ListItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Cart with page index and size
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPageSizeGet: async (pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart/PageSize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add product to Cart
         * @param {CreateCartRequest} [createCartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPost: async (createCartRequest?: CreateCartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add one item to cart
         * @param {CartItem} [cartItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartSingleAddPost: async (cartItem?: CartItem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart/SingleAdd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<CartItem>} [cartItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartUpdatePut: async (cartItem?: Array<CartItem>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cart/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete all item in Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GetAll cart of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete array item in cart
         * @param {DeleteCartRequest} [deleteCartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartListItemDelete(deleteCartRequest?: DeleteCartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartListItemDelete(deleteCartRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartListItemDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Cart with page index and size
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartPageSizeGet(pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartPageSizeGet(pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartPageSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add product to Cart
         * @param {CreateCartRequest} [createCartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartPost(createCartRequest?: CreateCartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartPost(createCartRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add one item to cart
         * @param {CartItem} [cartItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartSingleAddPost(cartItem?: CartItem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartSingleAddPost(cartItem, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartSingleAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<CartItem>} [cartItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartUpdatePut(cartItem?: Array<CartItem>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartUpdatePut(cartItem, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.apiCartUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete all item in Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiCartDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAll cart of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiCartGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete array item in cart
         * @param {DeleteCartRequest} [deleteCartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartListItemDelete(deleteCartRequest?: DeleteCartRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiCartListItemDelete(deleteCartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Cart with page index and size
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPageSizeGet(pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiCartPageSizeGet(pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add product to Cart
         * @param {CreateCartRequest} [createCartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPost(createCartRequest?: CreateCartRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiCartPost(createCartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add one item to cart
         * @param {CartItem} [cartItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartSingleAddPost(cartItem?: CartItem, options?: any): AxiosPromise<void> {
            return localVarFp.apiCartSingleAddPost(cartItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<CartItem>} [cartItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartUpdatePut(cartItem?: Array<CartItem>, options?: any): AxiosPromise<void> {
            return localVarFp.apiCartUpdatePut(cartItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @summary Delete all item in Cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartDelete(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAll cart of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartGet(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete array item in cart
     * @param {DeleteCartRequest} [deleteCartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartListItemDelete(deleteCartRequest?: DeleteCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartListItemDelete(deleteCartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Cart with page index and size
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartPageSizeGet(pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartPageSizeGet(pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add product to Cart
     * @param {CreateCartRequest} [createCartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartPost(createCartRequest?: CreateCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartPost(createCartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add one item to cart
     * @param {CartItem} [cartItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartSingleAddPost(cartItem?: CartItem, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartSingleAddPost(cartItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<CartItem>} [cartItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartUpdatePut(cartItem?: Array<CartItem>, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).apiCartUpdatePut(cartItem, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Order with Id
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderDelete: async (orderId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['OrderId'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Order with ID
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGetIdGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/GetId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check price service of shipping
         * @param {InforAddressDTO} [inforAddressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGetPriceShipPost: async (inforAddressDTO?: InforAddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/GetPriceShip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inforAddressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make Order with PaymentType is 1 : VNPAY , 2 : COD
         * @param {MakeOrderDTO} [makeOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPost: async (makeOrderDTO?: MakeOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(makeOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {number} [orderStatusId] 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPut: async (orderStatusId?: number, body?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderStatusId !== undefined) {
                localVarQueryParameter['OrderStatusId'] = orderStatusId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary To get Total Price Item Order with voucher
         * @param {TotalPriceItemDTO} [totalPriceItemDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderTotalPost: async (totalPriceItemDTO?: TotalPriceItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/Total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(totalPriceItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Order with Id
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderDelete(orderId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderDelete(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Order with ID
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderGetIdGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderGetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderGetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check price service of shipping
         * @param {InforAddressDTO} [inforAddressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderGetPriceShipPost(inforAddressDTO?: InforAddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderGetPriceShipPost(inforAddressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderGetPriceShipPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make Order with PaymentType is 1 : VNPAY , 2 : COD
         * @param {MakeOrderDTO} [makeOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderPost(makeOrderDTO?: MakeOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderPost(makeOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update
         * @param {number} [orderStatusId] 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderPut(orderStatusId?: number, body?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderPut(orderStatusId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary To get Total Price Item Order with voucher
         * @param {TotalPriceItemDTO} [totalPriceItemDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderTotalPost(totalPriceItemDTO?: TotalPriceItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderTotalPost(totalPriceItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderTotalPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Order with Id
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderDelete(orderId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderDelete(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Order with ID
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGetIdGet(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderGetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check price service of shipping
         * @param {InforAddressDTO} [inforAddressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGetPriceShipPost(inforAddressDTO?: InforAddressDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderGetPriceShipPost(inforAddressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make Order with PaymentType is 1 : VNPAY , 2 : COD
         * @param {MakeOrderDTO} [makeOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPost(makeOrderDTO?: MakeOrderDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderPost(makeOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {number} [orderStatusId] 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPut(orderStatusId?: number, body?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderPut(orderStatusId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary To get Total Price Item Order with voucher
         * @param {TotalPriceItemDTO} [totalPriceItemDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderTotalPost(totalPriceItemDTO?: TotalPriceItemDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderTotalPost(totalPriceItemDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary Delete Order with Id
     * @param {number} [orderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderDelete(orderId?: number, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderDelete(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderGet(options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Order with ID
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderGetIdGet(id?: number, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check price service of shipping
     * @param {InforAddressDTO} [inforAddressDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderGetPriceShipPost(inforAddressDTO?: InforAddressDTO, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderGetPriceShipPost(inforAddressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make Order with PaymentType is 1 : VNPAY , 2 : COD
     * @param {MakeOrderDTO} [makeOrderDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPost(makeOrderDTO?: MakeOrderDTO, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderPost(makeOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {number} [orderStatusId] 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPut(orderStatusId?: number, body?: number, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderPut(orderStatusId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary To get Total Price Item Order with voucher
     * @param {TotalPriceItemDTO} [totalPriceItemDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderTotalPost(totalPriceItemDTO?: TotalPriceItemDTO, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderTotalPost(totalPriceItemDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary User get Payment Detail
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentGet: async (orderId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['OrderId'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAll Payment exist (Only Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make payment, return vnpayUrl for payment (Input must have IP client)
         * @param {number} [orderId] 
         * @param {string} [clientIp] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentPost: async (orderId?: number, clientIp?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['OrderId'] = orderId;
            }

            if (clientIp !== undefined) {
                localVarQueryParameter['clientIp'] = clientIp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary For Admin want to edit StatusPayment
         * @param {number} [paymentId] 
         * @param {number} [paymentStatus] 
         * @param {number} [statusOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentPut: async (paymentId?: number, paymentStatus?: number, statusOrderId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (paymentId !== undefined) {
                localVarQueryParameter['paymentId'] = paymentId;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            if (statusOrderId !== undefined) {
                localVarQueryParameter['StatusOrderId'] = statusOrderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentShipCODPost: async (orderId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payment/ShipCOD`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['OrderId'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Return URL of VNPay payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnUrlGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ReturnUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary User get Payment Detail
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentGet(orderId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GetAll Payment exist (Only Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make payment, return vnpayUrl for payment (Input must have IP client)
         * @param {number} [orderId] 
         * @param {string} [clientIp] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentPost(orderId?: number, clientIp?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentPost(orderId, clientIp, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary For Admin want to edit StatusPayment
         * @param {number} [paymentId] 
         * @param {number} [paymentStatus] 
         * @param {number} [statusOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentPut(paymentId?: number, paymentStatus?: number, statusOrderId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentPut(paymentId, paymentStatus, statusOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentShipCODPost(orderId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentShipCODPost(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiPaymentShipCODPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Return URL of VNPay payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnUrlGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnUrlGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.returnUrlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary User get Payment Detail
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentGet(orderId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAll Payment exist (Only Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentGetAllGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make payment, return vnpayUrl for payment (Input must have IP client)
         * @param {number} [orderId] 
         * @param {string} [clientIp] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentPost(orderId?: number, clientIp?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentPost(orderId, clientIp, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary For Admin want to edit StatusPayment
         * @param {number} [paymentId] 
         * @param {number} [paymentStatus] 
         * @param {number} [statusOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentPut(paymentId?: number, paymentStatus?: number, statusOrderId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentPut(paymentId, paymentStatus, statusOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentShipCODPost(orderId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentShipCODPost(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Return URL of VNPay payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnUrlGet(options?: any): AxiosPromise<void> {
            return localVarFp.returnUrlGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary User get Payment Detail
     * @param {number} [orderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentGet(orderId?: number, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAll Payment exist (Only Admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentGetAllGet(options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make payment, return vnpayUrl for payment (Input must have IP client)
     * @param {number} [orderId] 
     * @param {string} [clientIp] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentPost(orderId?: number, clientIp?: string, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentPost(orderId, clientIp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary For Admin want to edit StatusPayment
     * @param {number} [paymentId] 
     * @param {number} [paymentStatus] 
     * @param {number} [statusOrderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentPut(paymentId?: number, paymentStatus?: number, statusOrderId?: number, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentPut(paymentId, paymentStatus, statusOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [orderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiPaymentShipCODPost(orderId?: number, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiPaymentShipCODPost(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Return URL of VNPay payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public returnUrlGet(options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).returnUrlGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDeleteProductProductIdDelete: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiProductDeleteProductProductIdDelete', 'productId', productId)
            const localVarPath = `/api/Product/DeleteProduct/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagvalue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductGetProductsbyTagValuetagvalueGet: async (tagvalue: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagvalue' is not null or undefined
            assertParamExists('apiProductGetProductsbyTagValuetagvalueGet', 'tagvalue', tagvalue)
            const localVarPath = `/api/Product/GetProductsbyTagValue{tagvalue}`
                .replace(`{${"tagvalue"}}`, encodeURIComponent(String(tagvalue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProductIdGet', 'id', id)
            const localVarPath = `/api/Product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProductDTO} [createProductDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductPost: async (createProductDTO?: CreateProductDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductSearchProductsbyNameproductnameGet: async (productname: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productname' is not null or undefined
            assertParamExists('apiProductSearchProductsbyNameproductnameGet', 'productname', productname)
            const localVarPath = `/api/Product/SearchProductsbyName{productname}`
                .replace(`{${"productname"}}`, encodeURIComponent(String(productname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {UpdateProductDTO} [updateProductDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductUpdateProductPut: async (productId?: number, updateProductDTO?: UpdateProductDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product/UpdateProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDeleteProductProductIdDelete(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductDeleteProductProductIdDelete(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductDeleteProductProductIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tagvalue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductGetProductsbyTagValuetagvalueGet(tagvalue: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductGetProductsbyTagValuetagvalueGet(tagvalue, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductGetProductsbyTagValuetagvalueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateProductDTO} [createProductDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductPost(createProductDTO?: CreateProductDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductPost(createProductDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} productname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductSearchProductsbyNameproductnameGet(productname: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductSearchProductsbyNameproductnameGet(productname, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductSearchProductsbyNameproductnameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {UpdateProductDTO} [updateProductDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductUpdateProductPut(productId?: number, updateProductDTO?: UpdateProductDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductUpdateProductPut(productId, updateProductDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.apiProductUpdateProductPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDeleteProductProductIdDelete(productId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProductDeleteProductProductIdDelete(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductGet(options?: any): AxiosPromise<Array<Product>> {
            return localVarFp.apiProductGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagvalue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductGetProductsbyTagValuetagvalueGet(tagvalue: string, options?: any): AxiosPromise<Array<ProductDTO>> {
            return localVarFp.apiProductGetProductsbyTagValuetagvalueGet(tagvalue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductIdGet(id: number, options?: any): AxiosPromise<Product> {
            return localVarFp.apiProductIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProductDTO} [createProductDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductPost(createProductDTO?: CreateProductDTO, options?: any): AxiosPromise<Product> {
            return localVarFp.apiProductPost(createProductDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductSearchProductsbyNameproductnameGet(productname: string, options?: any): AxiosPromise<Product> {
            return localVarFp.apiProductSearchProductsbyNameproductnameGet(productname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {UpdateProductDTO} [updateProductDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductUpdateProductPut(productId?: number, updateProductDTO?: UpdateProductDTO, options?: any): AxiosPromise<Product> {
            return localVarFp.apiProductUpdateProductPut(productId, updateProductDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductDeleteProductProductIdDelete(productId: number, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductDeleteProductProductIdDelete(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductGet(options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagvalue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductGetProductsbyTagValuetagvalueGet(tagvalue: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductGetProductsbyTagValuetagvalueGet(tagvalue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProductDTO} [createProductDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductPost(createProductDTO?: CreateProductDTO, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductPost(createProductDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductSearchProductsbyNameproductnameGet(productname: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductSearchProductsbyNameproductnameGet(productname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [productId] 
     * @param {UpdateProductDTO} [updateProductDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductUpdateProductPut(productId?: number, updateProductDTO?: UpdateProductDTO, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductUpdateProductPut(productId, updateProductDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StoreApi - axios parameter creator
 * @export
 */
export const StoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Store (Only role Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Store with id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStoreIdDelete', 'id', id)
            const localVarPath = `/api/Store/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Store with Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStoreIdGet', 'id', id)
            const localVarPath = `/api/Store/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Insert Item have exits in Store
         * @param {ItemRequest} [itemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreInsertItemPost: async (itemRequest?: ItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store/InsertItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Insert member for store with username or email member
         * @param {MemberRequest} [memberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreInsertMemberPost: async (memberRequest?: MemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store/InsertMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all items in Store with id
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreItemsGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all member in store with id
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreMembersGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new Store
         * @param {string} [storeName] 
         * @param {File} [avatar] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [phone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStorePost: async (storeName?: string, avatar?: File, description?: string, address?: string, phone?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (storeName !== undefined) { 
                localVarFormParams.append('StoreName', storeName as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('Avatar', avatar as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (phone !== undefined) { 
                localVarFormParams.append('Phone', phone as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Store (Only Admin Store)
         * @param {number} [storeId] 
         * @param {string} [storeName] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [phone] 
         * @param {string} [status] 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStorePut: async (storeId?: number, storeName?: string, description?: string, address?: string, phone?: string, status?: string, avatar?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (storeId !== undefined) {
                localVarQueryParameter['StoreId'] = storeId;
            }

            if (storeName !== undefined) {
                localVarQueryParameter['StoreName'] = storeName;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (address !== undefined) {
                localVarQueryParameter['Address'] = address;
            }

            if (phone !== undefined) {
                localVarQueryParameter['Phone'] = phone;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }


            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Item of Store
         * @param {ItemRequest} [itemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreStoreItemDelete: async (itemRequest?: ItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store/StoreItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Member of Store
         * @param {MemberRequest} [memberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreStoreMemberDelete: async (memberRequest?: MemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Store/StoreMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreApi - functional programming interface
 * @export
 */
export const StoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Store (Only role Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Store with id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Store with Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Insert Item have exits in Store
         * @param {ItemRequest} [itemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreInsertItemPost(itemRequest?: ItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreInsertItemPost(itemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreInsertItemPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Insert member for store with username or email member
         * @param {MemberRequest} [memberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreInsertMemberPost(memberRequest?: MemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreInsertMemberPost(memberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreInsertMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all items in Store with id
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreItemsGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreItemsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all member in store with id
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreMembersGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreMembersGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreMembersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new Store
         * @param {string} [storeName] 
         * @param {File} [avatar] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [phone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStorePost(storeName?: string, avatar?: File, description?: string, address?: string, phone?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreVM>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStorePost(storeName, avatar, description, address, phone, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Store (Only Admin Store)
         * @param {number} [storeId] 
         * @param {string} [storeName] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [phone] 
         * @param {string} [status] 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStorePut(storeId?: number, storeName?: string, description?: string, address?: string, phone?: string, status?: string, avatar?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStorePut(storeId, storeName, description, address, phone, status, avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStorePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Item of Store
         * @param {ItemRequest} [itemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreStoreItemDelete(itemRequest?: ItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreStoreItemDelete(itemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreStoreItemDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Member of Store
         * @param {MemberRequest} [memberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStoreStoreMemberDelete(memberRequest?: MemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStoreStoreMemberDelete(memberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreApi.apiStoreStoreMemberDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StoreApi - factory interface
 * @export
 */
export const StoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Store (Only role Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Store with id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Store with Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Insert Item have exits in Store
         * @param {ItemRequest} [itemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreInsertItemPost(itemRequest?: ItemRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreInsertItemPost(itemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Insert member for store with username or email member
         * @param {MemberRequest} [memberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreInsertMemberPost(memberRequest?: MemberRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreInsertMemberPost(memberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all items in Store with id
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreItemsGet(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreItemsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all member in store with id
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreMembersGet(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreMembersGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new Store
         * @param {string} [storeName] 
         * @param {File} [avatar] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [phone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStorePost(storeName?: string, avatar?: File, description?: string, address?: string, phone?: string, options?: any): AxiosPromise<StoreVM> {
            return localVarFp.apiStorePost(storeName, avatar, description, address, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Store (Only Admin Store)
         * @param {number} [storeId] 
         * @param {string} [storeName] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [phone] 
         * @param {string} [status] 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStorePut(storeId?: number, storeName?: string, description?: string, address?: string, phone?: string, status?: string, avatar?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiStorePut(storeId, storeName, description, address, phone, status, avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Item of Store
         * @param {ItemRequest} [itemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreStoreItemDelete(itemRequest?: ItemRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreStoreItemDelete(itemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Member of Store
         * @param {MemberRequest} [memberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStoreStoreMemberDelete(memberRequest?: MemberRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiStoreStoreMemberDelete(memberRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreApi - object-oriented interface
 * @export
 * @class StoreApi
 * @extends {BaseAPI}
 */
export class StoreApi extends BaseAPI {
    /**
     * 
     * @summary Get All Store (Only role Admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreGet(options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Store with id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Store with Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreIdGet(id: number, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Insert Item have exits in Store
     * @param {ItemRequest} [itemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreInsertItemPost(itemRequest?: ItemRequest, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreInsertItemPost(itemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Insert member for store with username or email member
     * @param {MemberRequest} [memberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreInsertMemberPost(memberRequest?: MemberRequest, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreInsertMemberPost(memberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all items in Store with id
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreItemsGet(id?: number, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreItemsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all member in store with id
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreMembersGet(id?: number, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreMembersGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new Store
     * @param {string} [storeName] 
     * @param {File} [avatar] 
     * @param {string} [description] 
     * @param {string} [address] 
     * @param {string} [phone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStorePost(storeName?: string, avatar?: File, description?: string, address?: string, phone?: string, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStorePost(storeName, avatar, description, address, phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Store (Only Admin Store)
     * @param {number} [storeId] 
     * @param {string} [storeName] 
     * @param {string} [description] 
     * @param {string} [address] 
     * @param {string} [phone] 
     * @param {string} [status] 
     * @param {File} [avatar] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStorePut(storeId?: number, storeName?: string, description?: string, address?: string, phone?: string, status?: string, avatar?: File, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStorePut(storeId, storeName, description, address, phone, status, avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Item of Store
     * @param {ItemRequest} [itemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreStoreItemDelete(itemRequest?: ItemRequest, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreStoreItemDelete(itemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Member of Store
     * @param {MemberRequest} [memberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public apiStoreStoreMemberDelete(memberRequest?: MemberRequest, options?: RawAxiosRequestConfig) {
        return StoreApiFp(this.configuration).apiStoreStoreMemberDelete(memberRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TagApi - axios parameter creator
 * @export
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTagIdGet', 'id', id)
            const localVarPath = `/api/Tag/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tagName] 
         * @param {Array<string>} [tagValues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagPost: async (tagName?: string, tagValues?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (tagName !== undefined) { 
                localVarFormParams.append('TagName', tagName as any);
            }
                if (tagValues) {
                tagValues.forEach((element) => {
                  localVarFormParams.append('TagValues', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [tagName] 
         * @param {Array<string>} [tagValues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagPut: async (id?: number, tagName?: string, tagValues?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


            if (tagName !== undefined) { 
                localVarFormParams.append('TagName', tagName as any);
            }
                if (tagValues) {
                tagValues.forEach((element) => {
                  localVarFormParams.append('TagValues', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [tagName] 
         * @param {Array<string>} [tagValues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagPost(tagName?: string, tagValues?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagPost(tagName, tagValues, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [tagName] 
         * @param {Array<string>} [tagValues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagPut(id?: number, tagName?: string, tagValues?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagPut(id, tagName, tagValues, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagDelete(id?: number, options?: any): AxiosPromise<Tag> {
            return localVarFp.apiTagDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagGet(options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.apiTagGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagIdGet(id: number, options?: any): AxiosPromise<Tag> {
            return localVarFp.apiTagIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [tagName] 
         * @param {Array<string>} [tagValues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagPost(tagName?: string, tagValues?: Array<string>, options?: any): AxiosPromise<Tag> {
            return localVarFp.apiTagPost(tagName, tagValues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [tagName] 
         * @param {Array<string>} [tagValues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagPut(id?: number, tagName?: string, tagValues?: Array<string>, options?: any): AxiosPromise<Tag> {
            return localVarFp.apiTagPut(id, tagName, tagValues, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagDelete(id?: number, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagGet(options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [tagName] 
     * @param {Array<string>} [tagValues] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagPost(tagName?: string, tagValues?: Array<string>, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagPost(tagName, tagValues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {string} [tagName] 
     * @param {Array<string>} [tagValues] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagPut(id?: number, tagName?: string, tagValues?: Array<string>, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagPut(id, tagName, tagValues, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ban User with Time and Username
         * @param {string} [username] 
         * @param {TimeAddInput} [timeAddInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersBanUserPost: async (username?: string, timeAddInput?: TimeAddInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/BanUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timeAddInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersComfirmEmailGet: async (userId?: string, token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/ComfirmEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [host] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgetPasswordGet: async (email?: string, host?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/ForgetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (host !== undefined) {
                localVarQueryParameter['host'] = host;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all user and Only role Admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdDelete', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Only role Admin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list User with pagesize
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPageSizeGet: async (pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/PageSize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [password] 
         * @param {string} [confirmPassword] 
         * @param {string} [email] 
         * @param {string} [phoneNumber] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [address] 
         * @param {string} [birthday] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (userName?: string, password?: string, confirmPassword?: string, email?: string, phoneNumber?: string, firstName?: string, lastName?: string, address?: string, birthday?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (userName !== undefined) { 
                localVarFormParams.append('UserName', userName as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('Password', password as any);
            }
    
            if (confirmPassword !== undefined) { 
                localVarFormParams.append('ConfirmPassword', confirmPassword as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (phoneNumber !== undefined) { 
                localVarFormParams.append('PhoneNumber', phoneNumber as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('FirstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('LastName', lastName as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (birthday !== undefined) { 
                localVarFormParams.append('Birthday', birthday as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [birthDay] 
         * @param {string} [address] 
         * @param {string} [phonenumber] 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut: async (username?: string, firstName?: string, lastName?: string, birthDay?: string, address?: string, phonenumber?: string, avatar?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (username !== undefined) { 
                localVarFormParams.append('Username', username as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('FirstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('LastName', lastName as any);
            }
    
            if (birthDay !== undefined) { 
                localVarFormParams.append('BirthDay', birthDay as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (phonenumber !== undefined) { 
                localVarFormParams.append('Phonenumber', phonenumber as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('Avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResetPasswordPost: async (resetPasswordRequest?: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/ResetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search user with key
         * @param {string} [key] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersSearchGet: async (key?: string, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update role with username and List Roles
         * @param {UpdateRoleRequest} [updateRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUpdateRolePost: async (updateRoleRequest?: UpdateRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/UpdateRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ban User with Time and Username
         * @param {string} [username] 
         * @param {TimeAddInput} [timeAddInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersBanUserPost(username?: string, timeAddInput?: TimeAddInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersBanUserPost(username, timeAddInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersBanUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersComfirmEmailGet(userId?: string, token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersComfirmEmailGet(userId, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersComfirmEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [host] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersForgetPasswordGet(email?: string, host?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersForgetPasswordGet(email, host, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersForgetPasswordGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all user and Only role Admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Only role Admin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list User with pagesize
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPageSizeGet(pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPageSizeGet(pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersPageSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [password] 
         * @param {string} [confirmPassword] 
         * @param {string} [email] 
         * @param {string} [phoneNumber] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [address] 
         * @param {string} [birthday] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(userName?: string, password?: string, confirmPassword?: string, email?: string, phoneNumber?: string, firstName?: string, lastName?: string, address?: string, birthday?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(userName, password, confirmPassword, email, phoneNumber, firstName, lastName, address, birthday, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [birthDay] 
         * @param {string} [address] 
         * @param {string} [phonenumber] 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPut(username?: string, firstName?: string, lastName?: string, birthDay?: string, address?: string, phonenumber?: string, avatar?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPut(username, firstName, lastName, birthDay, address, phonenumber, avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersResetPasswordPost(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search user with key
         * @param {string} [key] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersSearchGet(key?: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersSearchGet(key, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update role with username and List Roles
         * @param {UpdateRoleRequest} [updateRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersUpdateRolePost(updateRoleRequest?: UpdateRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersUpdateRolePost(updateRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersUpdateRolePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Ban User with Time and Username
         * @param {string} [username] 
         * @param {TimeAddInput} [timeAddInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersBanUserPost(username?: string, timeAddInput?: TimeAddInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersBanUserPost(username, timeAddInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersComfirmEmailGet(userId?: string, token?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersComfirmEmailGet(userId, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [host] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersForgetPasswordGet(email?: string, host?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersForgetPasswordGet(email, host, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all user and Only role Admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.apiUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Only role Admin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.apiUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list User with pagesize
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPageSizeGet(pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.apiUsersPageSizeGet(pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [password] 
         * @param {string} [confirmPassword] 
         * @param {string} [email] 
         * @param {string} [phoneNumber] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [address] 
         * @param {string} [birthday] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(userName?: string, password?: string, confirmPassword?: string, email?: string, phoneNumber?: string, firstName?: string, lastName?: string, address?: string, birthday?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersPost(userName, password, confirmPassword, email, phoneNumber, firstName, lastName, address, birthday, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [birthDay] 
         * @param {string} [address] 
         * @param {string} [phonenumber] 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut(username?: string, firstName?: string, lastName?: string, birthDay?: string, address?: string, phonenumber?: string, avatar?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersPut(username, firstName, lastName, birthDay, address, phonenumber, avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersResetPasswordPost(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search user with key
         * @param {string} [key] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersSearchGet(key?: string, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.apiUsersSearchGet(key, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update role with username and List Roles
         * @param {UpdateRoleRequest} [updateRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUpdateRolePost(updateRoleRequest?: UpdateRoleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersUpdateRolePost(updateRoleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Ban User with Time and Username
     * @param {string} [username] 
     * @param {TimeAddInput} [timeAddInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersBanUserPost(username?: string, timeAddInput?: TimeAddInput, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersBanUserPost(username, timeAddInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersComfirmEmailGet(userId?: string, token?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersComfirmEmailGet(userId, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {string} [host] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersForgetPasswordGet(email?: string, host?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersForgetPasswordGet(email, host, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all user and Only role Admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Only role Admin
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list User with pagesize
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPageSizeGet(pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPageSizeGet(pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userName] 
     * @param {string} [password] 
     * @param {string} [confirmPassword] 
     * @param {string} [email] 
     * @param {string} [phoneNumber] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [address] 
     * @param {string} [birthday] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPost(userName?: string, password?: string, confirmPassword?: string, email?: string, phoneNumber?: string, firstName?: string, lastName?: string, address?: string, birthday?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPost(userName, password, confirmPassword, email, phoneNumber, firstName, lastName, address, birthday, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [username] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [birthDay] 
     * @param {string} [address] 
     * @param {string} [phonenumber] 
     * @param {File} [avatar] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPut(username?: string, firstName?: string, lastName?: string, birthDay?: string, address?: string, phonenumber?: string, avatar?: File, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPut(username, firstName, lastName, birthDay, address, phonenumber, avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordRequest} [resetPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersResetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersResetPasswordPost(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search user with key
     * @param {string} [key] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersSearchGet(key?: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersSearchGet(key, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update role with username and List Roles
     * @param {UpdateRoleRequest} [updateRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersUpdateRolePost(updateRoleRequest?: UpdateRoleRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersUpdateRolePost(updateRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VoucherApi - axios parameter creator
 * @export
 */
export const VoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVoucherIdDelete', 'id', id)
            const localVarPath = `/api/Voucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVoucherIdGet', 'id', id)
            const localVarPath = `/api/Voucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateVoucherDTO} [updateVoucherDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherIdPut: async (id: number, updateVoucherDTO?: UpdateVoucherDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVoucherIdPut', 'id', id)
            const localVarPath = `/api/Voucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVoucherDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateVoucherDTO} [createVoucherDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherPost: async (createVoucherDTO?: CreateVoucherDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVoucherDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoucherApi - functional programming interface
 * @export
 */
export const VoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVoucherGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Voucher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVoucherGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.apiVoucherGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVoucherIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVoucherIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.apiVoucherIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVoucherIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Voucher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVoucherIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.apiVoucherIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateVoucherDTO} [updateVoucherDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVoucherIdPut(id: number, updateVoucherDTO?: UpdateVoucherDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVoucherIdPut(id, updateVoucherDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.apiVoucherIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateVoucherDTO} [createVoucherDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVoucherPost(createVoucherDTO?: CreateVoucherDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Voucher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVoucherPost(createVoucherDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.apiVoucherPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoucherApi - factory interface
 * @export
 */
export const VoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoucherApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherGet(options?: any): AxiosPromise<Array<Voucher>> {
            return localVarFp.apiVoucherGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiVoucherIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherIdGet(id: number, options?: any): AxiosPromise<Voucher> {
            return localVarFp.apiVoucherIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateVoucherDTO} [updateVoucherDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherIdPut(id: number, updateVoucherDTO?: UpdateVoucherDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiVoucherIdPut(id, updateVoucherDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateVoucherDTO} [createVoucherDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVoucherPost(createVoucherDTO?: CreateVoucherDTO, options?: any): AxiosPromise<Voucher> {
            return localVarFp.apiVoucherPost(createVoucherDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoucherApi - object-oriented interface
 * @export
 * @class VoucherApi
 * @extends {BaseAPI}
 */
export class VoucherApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public apiVoucherGet(options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).apiVoucherGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public apiVoucherIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).apiVoucherIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public apiVoucherIdGet(id: number, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).apiVoucherIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateVoucherDTO} [updateVoucherDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public apiVoucherIdPut(id: number, updateVoucherDTO?: UpdateVoucherDTO, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).apiVoucherIdPut(id, updateVoucherDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateVoucherDTO} [createVoucherDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public apiVoucherPost(createVoucherDTO?: CreateVoucherDTO, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).apiVoucherPost(createVoucherDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



